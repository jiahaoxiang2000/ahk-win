name: Create Release

on:
  push:
    tags:
      - "v*" # This workflow will run when any tag starting with 'v' is pushed

# Add permissions configuration
permissions:
  contents: write

jobs:
  build:
    name: Build and Create Release
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # We need full history to get commit messages

      - name: Install AutoHotkey v2
        run: |
          # Download AutoHotkey v2.0 installer
          Invoke-WebRequest -Uri "https://www.autohotkey.com/download/ahk-v2.zip" -OutFile "ahk-v2.zip"

          # Extract the zip file
          Expand-Archive -Path "ahk-v2.zip" -DestinationPath "AutoHotkey" -Force

          # Add AutoHotkey to PATH for this session
          $ahkPath = Join-Path $PWD "AutoHotkey"
          echo "$ahkPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

          # Verify installation
          if (Test-Path "$ahkPath\Compiler\Ahk2Exe.exe") {
            Write-Host "AutoHotkey v2 installed successfully"
            Write-Host "Compiler location: $ahkPath\Compiler\Ahk2Exe.exe"
          } else {
            Write-Error "AutoHotkey installation failed"
            exit 1
          }
        shell: powershell

      - name: Compile AutoHotkey Script
        run: |
          # Set paths
          $scriptPath = "key.ahk"
          $outputPath = "key.exe"
          $compilerPath = "AutoHotkey\Compiler\Ahk2Exe.exe"
          $basePath = "AutoHotkey\AutoHotkey64.exe"

          # Verify files exist
          if (-not (Test-Path $scriptPath)) {
            Write-Error "Script file not found: $scriptPath"
            exit 1
          }

          if (-not (Test-Path $compilerPath)) {
            Write-Error "Compiler not found: $compilerPath"
            exit 1
          }

          if (-not (Test-Path $basePath)) {
            Write-Error "Base file not found: $basePath"
            exit 1
          }

          # Compile the script
          Write-Host "Compiling $scriptPath to $outputPath..."
          & $compilerPath /in $scriptPath /out $outputPath /base $basePath /compress 1

          if ($LASTEXITCODE -ne 0) {
            Write-Error "Compilation failed with exit code $LASTEXITCODE"
            exit 1
          }

          if (Test-Path $outputPath) {
            Write-Host "Compilation successful! Output: $outputPath"
            $fileInfo = Get-Item $outputPath
            Write-Host "File size: $($fileInfo.Length) bytes"
          } else {
            Write-Error "Compiled executable not found"
            exit 1
          }
        shell: powershell

      - name: Get previous tag
        id: previoustag
        run: |
          echo "PREVIOUS_TAG=$(git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo '')" >> $GITHUB_ENV
          echo "CURRENT_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Generate release notes
        id: generate_notes
        run: |
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
            echo "## Changes since $PREVIOUS_TAG" >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
            git log --pretty=format:"* %s (%an) [%h](https://github.com/${{ github.repository }}/commit/%H)" $PREVIOUS_TAG..$CURRENT_TAG >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
            echo "## Initial Release" >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
            git log --pretty=format:"* %s (%an) [%h](https://github.com/${{ github.repository }}/commit/%H)" >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ env.CURRENT_TAG }}
          body: |
            ${{ env.RELEASE_NOTES }}

            ## Download

            - **key.exe** - Compiled AutoHotkey executable (Windows)
            - **Source code** - Download the source files to compile yourself

            ## Installation

            1. Download `key.exe` from the assets below
            2. Run the executable to start the AutoHotkey script

            ## Features

            - **Win+H/J/K/L**: Navigate between windows (vim-like)
            - **Win+Shift+H/L**: Switch virtual desktops with auto-focus
            - **Esc + combinations**: Comprehensive vim-like text navigation
          files: |
            key.exe
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

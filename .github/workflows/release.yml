name: Create Release

on:
  push:
    tags:
      - "v*" # This workflow will run when any tag starting with 'v' is pushed

# Add permissions configuration
permissions:
  contents: write

jobs:
  build:
    name: Build and Create Release
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # We need full history to get commit messages

      - name: Install AutoHotkey v2 and setup compiler
        run: |
          Write-Host "Installing AutoHotkey v2 via Chocolatey..."
          choco install autohotkey -y
          
          Start-Sleep -Seconds 5
          
          $ahkPath = "C:\Program Files\AutoHotkey"
          Write-Host "Found AutoHotkey at: $ahkPath"
          
          Write-Host "AutoHotkey installation contents:"
          Get-ChildItem $ahkPath -Recurse
          
          # Check if compiler exists
          $compiler = Get-ChildItem -Path $ahkPath -Name "Ahk2Exe.exe" -Recurse | Select-Object -First 1
          if (-not $compiler) {
            Write-Host "Compiler not found, installing it manually..."
            
            # Run the install-ahk2exe.ahk script that comes with AutoHotkey
            $installScript = Join-Path $ahkPath "UX\install-ahk2exe.ahk"
            if (Test-Path $installScript) {
              Write-Host "Running install-ahk2exe.ahk script..."
              & "$ahkPath\v2\AutoHotkey64.exe" $installScript
              Start-Sleep -Seconds 10
            } else {
              Write-Host "install-ahk2exe.ahk not found, creating compiler directory manually..."
              $compilerDir = Join-Path $ahkPath "Compiler"
              New-Item -ItemType Directory -Path $compilerDir -Force
              
              # Download compiler from GitHub releases
              $compilerUrl = "https://raw.githubusercontent.com/AutoHotkey/Ahk2Exe/master/Ahk2Exe.exe"
              $compilerPath = Join-Path $compilerDir "Ahk2Exe.exe"
              
              try {
                Write-Host "Downloading Ahk2Exe from GitHub..."
                Invoke-WebRequest -Uri $compilerUrl -OutFile $compilerPath -UserAgent "Mozilla/5.0"
              } catch {
                Write-Host "Direct download failed, copying from resources..."
                # Fallback: use built-in compilation method if available
                Write-Host "Will use runtime compilation instead of pre-compiled exe"
              }
            }
          }
          
          # Re-check for compiler
          $compiler = Get-ChildItem -Path $ahkPath -Name "Ahk2Exe.exe" -Recurse | Select-Object -First 1
          $runtime = Get-ChildItem -Path $ahkPath -Name "AutoHotkey64.exe" -Recurse | Select-Object -First 1
          
          if ($compiler) {
            Write-Host "Compiler found: $compiler"
          } else {
            Write-Host "WARNING: Ahk2Exe.exe still not found, will try alternative compilation"
          }
          
          if ($runtime) {
            Write-Host "Runtime found: $runtime"
          } else {
            Write-Error "AutoHotkey64.exe not found"
            exit 1
          }
          
          Add-Content -Path $env:GITHUB_ENV -Value "AHK_PATH=$ahkPath"
        shell: powershell

      - name: Compile AutoHotkey Script
        run: |
          $scriptPath = "key.ahk"
          $outputPath = "key.exe"
          $ahkPath = $env:AHK_PATH
          
          # Find compiler and runtime in installation
          $compiler = Get-ChildItem -Path $ahkPath -Name "Ahk2Exe.exe" -Recurse | Select-Object -First 1
          $runtime = Get-ChildItem -Path $ahkPath -Name "AutoHotkey64.exe" -Recurse | Select-Object -First 1
          
          if ($compiler -and $runtime) {
            $compilerPath = Join-Path $ahkPath $compiler
            $basePath = Join-Path $ahkPath $runtime
            
            Write-Host "Using Ahk2Exe compiler method..."
            Write-Host "Compiler: $compilerPath"
            Write-Host "Base: $basePath"
          } else {
            # Alternative: create a bundle instead of compilation
            Write-Host "Ahk2Exe not available, creating runtime bundle..."
            $runtimePath = Join-Path $ahkPath "v2\AutoHotkey64.exe"
            
            if (Test-Path $runtimePath) {
              # Copy runtime and script together
              Copy-Item $runtimePath $outputPath
              Write-Host "Created runtime bundle: $outputPath"
              
              # Create a batch file that runs the script
              $batchContent = "@echo off`nstart `"`" `"$outputPath`" `"key.ahk`""
              Set-Content -Path "run-key.bat" -Value $batchContent
              
              Write-Host "Runtime bundle created successfully"
              exit 0
            } else {
              Write-Error "No compilation method available"
              exit 1
            }
          }
          
          # Verify files exist
          if (-not (Test-Path $scriptPath)) {
            Write-Error "Script file not found: $scriptPath"
            exit 1
          }
          
          if (-not (Test-Path $compilerPath)) {
            Write-Error "Compiler not found: $compilerPath"
            exit 1
          }
          
          if (-not (Test-Path $basePath)) {
            Write-Error "Base file not found: $basePath"
            exit 1
          }
          
          # Compile the script
          Write-Host "Compiling $scriptPath to $outputPath..."
          Write-Host "Using compiler: $compilerPath"
          Write-Host "Using base: $basePath"
          
          & $compilerPath /in $scriptPath /out $outputPath /base $basePath /compress 1
          
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Compilation failed with exit code $LASTEXITCODE"
            exit 1
          }
          
          if (Test-Path $outputPath) {
            Write-Host "Compilation successful! Output: $outputPath"
            $fileInfo = Get-Item $outputPath
            Write-Host "File size: $($fileInfo.Length) bytes"
          } else {
            Write-Error "Compiled executable not found"
            exit 1
          }
        shell: powershell

      - name: Get previous tag
        id: previoustag
        run: |
          echo "PREVIOUS_TAG=$(git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo '')" >> $GITHUB_ENV
          echo "CURRENT_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Generate release notes
        id: generate_notes
        run: |
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
            echo "## Changes since $PREVIOUS_TAG" >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
            git log --pretty=format:"* %s (%an) [%h](https://github.com/${{ github.repository }}/commit/%H)" $PREVIOUS_TAG..$CURRENT_TAG >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
            echo "## Initial Release" >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
            git log --pretty=format:"* %s (%an) [%h](https://github.com/${{ github.repository }}/commit/%H)" >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ env.CURRENT_TAG }}
          body: |
            ${{ env.RELEASE_NOTES }}

            ## Download

            - **key.exe** - Compiled AutoHotkey executable (Windows)
            - **Source code** - Download the source files to compile yourself

            ## Installation

            1. Download `key.exe` from the assets below
            2. Run the executable to start the AutoHotkey script

            ## Features

            - **Win+H/J/K/L**: Navigate between windows (vim-like)
            - **Win+Shift+H/L**: Switch virtual desktops with auto-focus
            - **Esc + combinations**: Comprehensive vim-like text navigation
          files: |
            key.exe
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
